@model BeautyPlatform.Models.BusinessProfile

@{
    ViewData["Title"] = @Model.BusinessName;
}

<!-- Banner Section -->
<div class="w-100 position-relative" style="margin: 0; padding: 0; overflow-x: hidden;">
    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
        <img src="@Model.ImageUrl" class="w-100" style="height: 500px; object-fit: cover;" alt="@Model.BusinessName" />
    }
    else
    {
        <img src="/images/default-banner.jpg" class="w-100" style="height: 500px; object-fit: cover;" alt="Business Banner" />
    }

    <!-- Overlay -->
    <div class="position-absolute top-0 start-0 w-100 h-100 d-flex flex-column justify-content-center align-items-center text-white" style="background-color: rgba(0,0,0,0.4);">
        <h1 class="display-4 fw-bold">@Model.BusinessName</h1>
        <p class="lead text-center px-3">@Model.Description</p>
    </div>
</div>

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb p-2 rounded-3 align-items-center">
        <li class="breadcrumb-item d-flex align-items-center">
            <i class="bi bi-house-door me-2"></i>
            <a href="/" class="text-decoration-none text-dark">Home</a>
        </li>
        <li class="breadcrumb-item active text-success d-flex align-items-center" aria-current="page">
            <i class="bi bi-shop me-2"></i>@Model.BusinessName
        </li>
    </ol>
</nav>
<!-- Main Content -->
<div class="container my-3">
    <h2 class="text-center fw-semibold mb-4">Products & Services</h2>
    @if (TempData["AppointmentError"] != null)
    {
        <div class="alert alert-danger text-center mb-4">
            @TempData["AppointmentError"]
        </div>
    }


    <!-- Tabs (Products / Services) -->
    <div class="d-flex justify-content-center mb-4">
        <div class="btn-group" role="group">
            <button id="productsTab" type="button" class="btn tab-btn active">Products</button>
            <button id="servicesTab" type="button" class="btn tab-btn">Services</button>
        </div>
    </div>


    <!-- Search & Sort -->
    <form id="filterForm" onsubmit="event.preventDefault();">

        <div class="row justify-content-center mb-4 g-3">
            <div class="col-10 col-sm-8 col-md-5 col-lg-4">
                <input type="text" id="searchInput" name="searchQuery" class="form-control rounded-pill"
                       placeholder="Search products or services..." />
            </div>
            <div class="col-6 col-sm-4 col-md-4 col-lg-3">
                <select id="sortSelect" name="sortOrder" class="form-select rounded-pill">
                    <option value="">Sort by price</option>
                    <option value="asc">Price: Low to High</option>
                    <option value="desc">Price: High to Low</option>
                </select>
            </div>
        </div>

    </form>



    <!-- Products Grid -->
    <div id="productsGrid" class="row row-cols-2 row-cols-md-4 g-4">
        @foreach (var product in Model.Products)
        {
            <div class="col">
                <div class="bg-white rounded-4 shadow-sm overflow-hidden cursor-pointer hover-shadow transition"
                     style="transition: all 0.3s ease; cursor: pointer;"
                >

                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                    {
                        <img src="@product.ImageUrl"
                             alt="@product.Name"
                             class="d-block mx-auto mt-3 "
                             style="width: 180px; height: 160px; object-fit: cover;"
                               onclick="openItemModal('@product.Name', '@product.Description', '@product.Price.ToString("C")', '@product.ImageUrl', @product.Id)"/>
                    }
                    <div class="p-3 text-center">
                        <h5 class="fw-semibold mb-1" style="font-size: 1rem;">@product.Name</h5>
                        <p class="text-muted small mb-2" style="font-size: 0.75rem; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                            @product.Description
                        </p>
                        <p class="text-dark fw-bold mb-0" style="font-size: 1.1rem;">
                            @product.Price.ToString("C")
                        </p>
                        <!-- Add to Cart Button + Quantity -->
                       <form action="/Customer/AddToCart" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="productId" value="@product.Id" />
                            <input type="hidden" name="scrollPosition" class="scroll-input" />



    <!-- Quantity Section -->
    <div class="mt-1">
        <div class="d-flex justify-content-center align-items-center mb-2">
            <button type="button" class="btn text-danger border-0 fs-2 px-1" onclick="updateQuantity('product-qty-@product.Id', -1)">−</button>
            <input type="text" id="product-qty-@product.Id" name="quantity" value="1" readonly
                   class="form-control text-center mx-1 border-0 focus-none shadow-none"
                   style="width: 50px; background-color: transparent" />
            <button type="button" class="btn text-success border-0 fs-2 px-1" onclick="updateQuantity('product-qty-@product.Id', 1)">+</button>
        </div>

        <!-- Add to Cart Button -->
        <button class="btn btn-dark w-100" type="submit">
            Add to Cart
        </button>
    </div>
</form>




                    </div>
                </div>
            </div>
        }
    </div>


    <!-- Services Grid (hidden initially) -->
    <div id="servicesGrid" class="row g-4 d-none">
        @foreach (var service in Model.Services)
        {
            <div class="col-sm-6 col-md-4">
                <div class="card h-100 bg-light border-0 shadow-sm"
                     style="cursor: pointer;"
                    >

                    <div class="card-body d-flex align-items-center">
                        <!-- Left: Image -->
                        <div class="flex-shrink-0">
                            <img src="@service.ImageUrl"
                                 alt="@service.Name"
                                 class="rounded"
                                 style="width: 150px; height: 120px; object-fit: cover; cursor: pointer;"
                                 onclick="openItemModal('@service.Name', '@service.Description', '@service.Price.ToString("C")', '@service.ImageUrl', @service.Id)" />
                        </div>

                        <!-- Right: Text content -->
                        <div class="ms-3 flex-grow-1 d-flex flex-column justify-content-center align-items-center text-center">
                            <h5 class="card-title text-primary fw-bold mb-1">@service.Name</h5>
                            <p class="card-text small text-muted mb-2">@service.Description</p>
                            <p class="fw-bold mb-2">
                                @service.Price.ToString("C") •
                                @if (service.Duration.Hours > 0)
                                {
                                    @($"{service.Duration.Hours} hr ")
                                }
                                @if (service.Duration.Minutes > 0)
                                {
                                    @($"{service.Duration.Minutes} min")
                                }
                            </p>
                            <button class="btn btn-primary btn-sm rounded-pill mt-2"
                                    data-bs-toggle="modal"
                                    data-bs-target="#bookingModal"
                                    data-service="@service.Name"
                                    data-service-id="@service.Id">
                                Book Now
                            </button>


                        </div>

                    </div>

                </div>
            </div>
        }
    </div>
</div>

<!-- Booking Modal -->
<div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" asp-action="CreateAppointment" asp-controller="Customer">
                <input type="hidden" name="ScrollPosition" id="bookingScrollInput" />

                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="bookingModalLabel">Book Service</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <input type="hidden" id="ServiceIdInput" name="ServiceId" />

                    <div class="mb-3">
                        <label for="selectedService" class="form-label">Service</label>
                        <input type="text" id="selectedService" class="form-control" readonly />
                    </div>

                    <div class="mb-3">
                        <label for="AppointmentDate" class="form-label">Select Day</label>
                        <input type="date" class="form-control" id="AppointmentDate" name="AppointmentDate" required />
                    </div>

                    <div class="mb-3">
                        <label for="AppointmentTime" class="form-label">Select Time</label>
                      <input type="time" class="form-control" id="AppointmentTime" name="AppointmentTime"
       min="08:00" max="17:00" required
       oninvalid="this.setCustomValidity('Booking time must be between 08:00 and 17:00')"
       oninput="this.setCustomValidity('')" />


                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary btn-sm">Confirm Booking</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modern Dark Item Details Modal -->
<div class="modal fade" id="itemModal" tabindex="-1" aria-labelledby="itemModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-white text-white rounded-4 shadow-lg position-relative" style="max-width: 400px; margin: auto; border: none;">

            <!-- ✖ Close button -->
            <button type="button" class="btn-close position-absolute top-0 end-0 m-2" data-bs-dismiss="modal" aria-label="Close" style="z-index: 10; transform: scale(0.75);"></button>

            <!-- Modal Body -->
            <div class="modal-body p-4 text-center">
                <img id="itemModalImage" src="" class="img-fluid rounded mb-4" style="width: 100%; max-width: 330px; height: 300px; object-fit: cover; object-position: center; margin: 0 auto;" />

                <h4 id="itemModalName" class="fw-bold mb-2 text-dark"></h4>
                <p id="itemModalDescription" class="text-muted small mb-2 text-light"></p>
                <h5 id="itemModalPrice" class="fw-bold text-dark mb-4"></h5>

                <div class="d-flex justify-content-center align-items-center mb-3">
                    <button type="button" class="btn text-danger border-0 fs-2 px-2" onclick="updateQuantity('modalQtyInput', -1)">−</button>
                    <input type="text" id="modalQtyInput" value="1" readonly
                           class="form-control text-center mx-1 border-0 shadow-none"
                           style="width: 50px; background-color: transparent; outline: none;" />
                    <button type="button" class="btn text-success border-0 fs-2 px-2" onclick="updateQuantity('modalQtyInput', 1)">+</button>
                </div>

                <!-- Add to Cart Button -->
                <button id="addToCartButton" type="button" class="btn btn-dark text-white w-100 fw-semibold rounded-pill">
                    Add to Cart
                </button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
              // Tabs toggle
        document.getElementById('productsTab').addEventListener('click', function () {
            document.getElementById('productsGrid').classList.remove('d-none');
            document.getElementById('servicesGrid').classList.add('d-none');

            this.classList.add('active');
            document.getElementById('servicesTab').classList.remove('active');

            // Reset search and sort
            searchInput.value = '';
            sortSelect.value = '';
            filterAndSortItems();
        });

        document.getElementById('servicesTab').addEventListener('click', function () {
            document.getElementById('servicesGrid').classList.remove('d-none');
            document.getElementById('productsGrid').classList.add('d-none');

            this.classList.add('active');
            document.getElementById('productsTab').classList.remove('active');

            // Reset search and sort
            searchInput.value = '';
            sortSelect.value = '';
            filterAndSortItems();
        });

                // Trigger form submission when search input or sort option changes

                     bookingModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var serviceName = button.getAttribute('data-service');
            var serviceId = button.getAttribute('data-service-id');

            document.getElementById('selectedService').value = serviceName;
            document.getElementById('ServiceIdInput').value = serviceId;
        });



                  function addToCart(productId) {
            const qtyInput = document.getElementById(`product-qty-${productId}`);
            const quantity = parseInt(qtyInput.value);

            fetch('/Customer/AddToCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({ productId, quantity })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    updateCartCount();
                } else {
                    alert('Failed to add to cart.');
                }
            });
        }
                function confirmBooking() {
            const serviceId = document.getElementById('selectedService').getAttribute('data-service-id');
            const date = document.getElementById('bookingDate').value;
            const time = document.getElementById('bookingTime').value;

            if (!date || !time) {
                alert("Please select both date and time.");
                return;
            }

            const appointmentDateTime = `${date}T${time}`;

            fetch('/Appointment/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    ServiceId: parseInt(serviceId),
                    AppointmentDateTime: appointmentDateTime
                })
            })
            .then(response => {
                if (response.ok) {
                    alert('Appointment booked successfully!');
                    bootstrap.Modal.getInstance(document.getElementById('bookingModal')).hide();
                } else {
                    alert('Something went wrong.');
                }
            });
        }


        function updateCartCount() {
            fetch('/Customer/GetCartCount')
                .then(res => res.json())
                .then(data => {
                    const badge = document.getElementById('cart-count-badge');
                    if (data.count > 0) {
                        badge.style.display = 'inline-block';
                        badge.textContent = data.count;
                    } else {
                        badge.style.display = 'none';
                    }
                });
        }


              
          

                   function updateQuantity(id, delta) {
            const input = document.getElementById(id);
            let value = parseInt(input.value) || 1;
            value = Math.max(1, value + delta); // Prevent going below 1
            input.value = value;
        }




        // Search and Sort
        const searchInput = document.getElementById('searchInput');
        const sortSelect = document.getElementById('sortSelect');
        let debounceTimeout;

        searchInput.addEventListener('input', function () {
            clearTimeout(debounceTimeout);
            debounceTimeout = setTimeout(filterAndSortItems, 300); // 300ms debounce
        });
        
        sortSelect.addEventListener('change', filterAndSortItems);

              function filterAndSortItems() {
            const query = searchInput.value.toLowerCase();
            const sort = sortSelect.value;

            const isProductGridActive = !document.getElementById('productsGrid').classList.contains('d-none');
            const gridId = isProductGridActive ? 'productsGrid' : 'servicesGrid';
            const grid = document.getElementById(gridId);
            const itemSelector = isProductGridActive ? '.col' : '.col-sm-6';
            const items = grid.querySelectorAll(itemSelector);

            let itemsArray = Array.from(items);

            // Filter
            itemsArray.forEach(item => {
                const title = item.querySelector('h5, .card-title')?.textContent.toLowerCase() || '';
                const description = item.querySelector('.text-muted, .card-text')?.textContent.toLowerCase() || '';
                if (title.includes(query) || description.includes(query)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });

            // Sort
            if (sort) {
                itemsArray = itemsArray.filter(item => item.style.display !== 'none');

                itemsArray.sort((a, b) => {
                    let priceA, priceB;
                    if (isProductGridActive) {
                        priceA = parseFloat(a.querySelector('.fw-bold')?.textContent.replace(/[^0-9.]+/g, '') || 0);
                        priceB = parseFloat(b.querySelector('.fw-bold')?.textContent.replace(/[^0-9.]+/g, '') || 0);
                    } else {
                        const servicePriceA = a.querySelector('.fw-bold')?.textContent.split('•')[0] || '';
                        const servicePriceB = b.querySelector('.fw-bold')?.textContent.split('•')[0] || '';
                        priceA = parseFloat(servicePriceA.replace(/[^0-9.]+/g, '') || 0);
                        priceB = parseFloat(servicePriceB.replace(/[^0-9.]+/g, '') || 0);
                    }

                    return sort === 'asc' ? priceA - priceB : priceB - priceA;
                });

               requestAnimationFrame(() => {
    const scrollTop = window.scrollY;
    grid.innerHTML = '';
    itemsArray.forEach(item => grid.appendChild(item));
    window.scrollTo({ top: scrollTop });
});

            }
        }
                 document.querySelectorAll('form[action="/Customer/AddToCart"]').forEach(form => {
                form.addEventListener('submit', function () {
                    const scrollY = window.scrollY || window.pageYOffset;
                           form.querySelector('.scroll-input').value = scrollY;

                });
            });
                        document.querySelector('#bookingModal form').addEventListener('submit', function () {
            const scrollY = window.scrollY || window.pageYOffset;
            document.getElementById('bookingScrollInput').value = scrollY;
        });

        // This was misplaced inside the submit handler!
        var selectedItemId = null;

        function openItemModal(name, description, price, imageUrl, id) {
            document.getElementById('itemModalName').textContent = name;
            document.getElementById('itemModalDescription').textContent = description;
            document.getElementById('itemModalPrice').textContent = price;
            document.getElementById('itemModalImage').src = imageUrl;

            selectedItemId = id;

            var itemModal = new bootstrap.Modal(document.getElementById('itemModal'));
            itemModal.show();
        }

        window.addEventListener('DOMContentLoaded', function () {
            const scrollY = '@TempData["ScrollPosition"]';
            if (scrollY) {
                window.scrollTo({ top: parseInt(scrollY), behavior: 'instant' });
            }
        });


    </script>
}

