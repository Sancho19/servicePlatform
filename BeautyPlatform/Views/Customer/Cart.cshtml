@model List<BeautyPlatform.Models.CartItem>
@{
    ViewData["Title"] = "My Cart";
    var grandTotal = Model.Sum(item => item.Product.Price * item.Quantity);
}

<div class="container py-5">
    <h2 class="mb-4 text-center fw-bold">Your Shopping Cart</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success text-center">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">Your cart is empty.</div>
    }
    else
    {
        <form id="cartForm" method="post">
            @Html.AntiForgeryToken()

            <div class="row gy-4">
                @foreach (var item in Model)
                {
                    <div class="col-12">
                        <div class="card border-0 shadow-sm rounded-4 p-3" data-item-id="@item.Id">
                            <div class="row g-3 align-items-center">
                                <!-- Product Image -->
                                <div class="col-3 col-md-2">
                                    <img src="@item.Product.ImageUrl" alt="@item.Product.Name"
                                         class="img-fluid rounded-3"
                                         style="height: 100px; width: 100%; object-fit: cover;" />
                                </div>

                                <!-- Product Info & Controls -->
                                <div class="col-9 col-md-6">
                                    <h5 class="fw-semibold mb-1">@item.Product.Name</h5>
                                    <p class="text-muted small mb-1">Price: @item.Product.Price.ToString("C")</p>

                                    <!-- Quantity Controls (Minimalist Style) -->
                                    <div class="d-flex justify-content-start align-items-center mb-2">
                                        <button type="button"
                                                class="btn text-danger border-0 fs-3 px-2"
                                                onclick="changeQuantity(@item.Id, -1)">
                                            −
                                        </button>

                                        <input type="text"
                                               id="qty-@item.Id"
                                               class="form-control text-center mx-1 border-0 shadow-none"
                                               value="@item.Quantity"
                                               readonly
                                               style="width: 50px; background-color: transparent; font-weight: 600;" />

                                        <button type="button"
                                                class="btn text-success border-0 fs-3 px-2"
                                                onclick="changeQuantity(@item.Id, 1)">
                                            +
                                        </button>
                                    </div>

                                </div>

                                <!-- Price & Remove -->
                                <div class="col-12 col-md-4 text-md-end mt-3 mt-md-0">
                                    <div class="d-flex justify-content-between justify-content-md-end align-items-center gap-3">
                                        <div>
                                            <strong id="item-total-@item.Id" class="text- fs">
                                                @((item.Product.Price * item.Quantity).ToString("C"))
                                            </strong>
                                        </div>
                                        <div>
                                            <button type="button" class="btn btn-outline-danger btn-sm"
                                                    onclick="removeCartItem(@item.Id)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>


            <!-- Sticky Total Section -->
            <div class="bg-white border-top shadow-sm mt-4 pt-4 pb-3 sticky-bottom">
                <div class="container d-flex justify-content-between align-items-center flex-wrap gap-3">
                    <h4 class="mb-0 fw-bold">
                        Total: <span id="grand-total">@grandTotal.ToString("C")</span>
                    </h4>
                    <a href="/Checkout" class="btn btn-success btn-lg rounded-pill px-4">
                        Checkout <i class="bi bi-arrow-right"></i>
                    </a>
                </div>
            </div>

        </form>

    }
</div>
<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1080;">
    <div id="toastRemoved" class="toast align-items-center text-white bg-danger border-0 shadow-lg" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body fw-semibold">
                Item removed from cart.
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        function getAntiForgeryToken() {
            return document.querySelector('input[name="__RequestVerificationToken"]').value;
        }

        function removeCartItem(itemId) {
            fetch(`/Customer/RemoveFromCart/${itemId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': getAntiForgeryToken()
                }
            }).then(res => res.json())
              .then(data => {
                  if (data.success) {
                      const itemCard = document.querySelector(`[data-item-id="${itemId}"]`);
                      if (itemCard) itemCard.remove();

                      showToast('toastRemoved');
                      recalculateGrandTotal();
                  } else {
                      alert('Failed to remove item.');
                  }
              });
        }
                   function changeQuantity(itemId, delta) {
            const input = document.getElementById(`qty-${itemId}`);
            let qty = parseInt(input.value) || 1;
            qty = Math.max(1, qty + delta);
            input.value = qty;
            updateCartItem(itemId, qty);
        }



        function updateCartItem(itemId, quantity) {
            fetch('/Customer/UpdateCartItemAjax', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify({ itemId, quantity: parseInt(quantity) })
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    document.getElementById(`item-total-${itemId}`).textContent = formatCurrency(data.itemTotal);
                    document.getElementById('grand-total').textContent = formatCurrency(data.grandTotal);
                } else {
                    alert("Failed to update cart.");
                }
            });
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-ZA', { style: 'currency', currency: 'ZAR' }).format(amount);
        }

        function recalculateGrandTotal() {
            fetch('/Customer/GetCartTotal')
                .then(res => res.json())
                .then(data => {
                    document.getElementById('grand-total').textContent = formatCurrency(data.total);
                });
        }

        function showToast(toastId) {
            const toastEl = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
        }
    </script>
}

